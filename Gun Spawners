local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Liberty Heights NYCðŸ—½",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Liberty Heights NYCðŸ—½",
   LoadingSubtitle = "",
   Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Key System",
      Subtitle = "Key System",
      Note = "Wrong Key", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {""} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Spawners", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Gun Spawners")

local Button = Tab:CreateButton({
    Name = "Glock 19x",
    Callback = function()
        local args = {
            [1] = "Glock 19x",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })

 local Button = Tab:CreateButton({
    Name = "FiveSeven",
    Callback = function()
        local args = {
            [1] = "FiveSeven",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })

 local Button = Tab:CreateButton({
    Name = "Glock 17",
    Callback = function()
        local args = {
            [1] = "Glock 17",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })


 local Button = Tab:CreateButton({
    Name = "Glock 26",
    Callback = function()
        local args = {
            [1] = "Glock 26",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })


 local Button = Tab:CreateButton({
    Name = "HK P7",
    Callback = function()
        local args = {
            [1] = "HK P7",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })

 local Button = Tab:CreateButton({
    Name = "Hellcat RDP 3.8",
    Callback = function()
        local args = {
            [1] = "Hellcat RDP 3.8",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })


 local Button = Tab:CreateButton({
    Name = "Revolver .380 ACP",
    Callback = function()
        local args = {
            [1] = "Revolver .380 ACP",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })


 local Button = Tab:CreateButton({
    Name = "Ruger SR40",
    Callback = function()
        local args = {
            [1] = "Ruger SR40",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })

 local Button = Tab:CreateButton({
    Name = "Taurus .380 ACP",
    Callback = function()
        local args = {
            [1] = "Taurus .380 ACP",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })


local Section = Tab:CreateSection("Ammo Spawners")


local Button = Tab:CreateButton({
    Name = "9mm",
    Callback = function()
        local args = {
            [1] = "9mm",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })

 local Button = Tab:CreateButton({
    Name = "7.62 x 39mm",
    Callback = function()
        local args = {
            [1] = "7.62 x 39mm",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })

 local Button = Tab:CreateButton({
    Name = ".380 ACP",
    Callback = function()
        local args = {
            [1] = ".380 ACP",
    
        }    game:GetService("ReplicatedStorage").Remotes.GiveGun:FireServer(unpack(args)) 
    end,
 })
 --------------------------------------------------------------------------------------------------

 local Sigma = Window:CreateTab("Teleports", 4483362458) -- Title, Image

 local Section = Sigma:CreateSection("Disable Anti Cheat")

 local Button = Sigma:CreateButton({
    Name = "Disable Anti Cheat",
    Callback = function()
        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        --warn(YourRoot.CFrame)
        --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
        local LocationToTP2 = CFrame.new(-479, -181, -555)
        YourRoot.CFrame = LocationToTP2
    end,
 })

 local Section = Sigma:CreateSection("Teleports")

 local Button = Sigma:CreateButton({
    Name = "Mask Shop",
    Callback = function()
        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        --warn(YourRoot.CFrame)
        --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
        local LocationToTP2 = CFrame.new(-640, -58, 885)
        YourRoot.CFrame = LocationToTP2
    end,
 })


 local Button = Sigma:CreateButton({
    Name = "Deli",
    Callback = function()
        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        --warn(YourRoot.CFrame)
        --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
        local LocationToTP2 = CFrame.new(-400, -67, 764)
        YourRoot.CFrame = LocationToTP2
    end,
 })

 local Button = Sigma:CreateButton({
    Name = "Bike Shop",
    Callback = function()
        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        --warn(YourRoot.CFrame)
        --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
        local LocationToTP2 = CFrame.new(-609, -49, -209)
        YourRoot.CFrame = LocationToTP2
    end,
 })



 local Button = Sigma:CreateButton({
    Name = "Harlem Clothing Shop",
    Callback = function()
        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        --warn(YourRoot.CFrame)
        --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
        local LocationToTP2 = CFrame.new(-437, -117, 362)
        YourRoot.CFrame = LocationToTP2
    end,
 })


 local Button = Sigma:CreateButton({
    Name = "Shoe Shop",
    Callback = function()
        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        --warn(YourRoot.CFrame)
        --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
        local LocationToTP2 = CFrame.new(155, -50, 279)
        YourRoot.CFrame = LocationToTP2
    end,
 })


 local Button = Sigma:CreateButton({
    Name = "Exotic Shop",
    Callback = function()
        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        --warn(YourRoot.CFrame)
        --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
        local LocationToTP2 = CFrame.new(-302, -65, 358)
        YourRoot.CFrame = LocationToTP2
    end,
 })

 

 local Sigmas = Window:CreateTab("Player", 4483362458) -- Title, Image

 local Section = Sigmas:CreateSection("Misc")

 local Slider = Sigmas:CreateSlider({
    Name = "WalkSpeed",
    Range = {0, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 0,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
    end,
 })

 local Slider = Sigmas:CreateSlider({
    Name = "JumpPower",
    Range = {0, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 0,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
    end,
 })


 local Slider = Sigmas:CreateSlider({
    Name = "Level",
    Range = {0, 100},
    Increment = 1,
    Suffix = "Level",
    CurrentValue = 0,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game.Players.LocalPlayer.PlayerData.Level.Value = (Value)
    end,
 })

 

 local Section = Sigmas:CreateSection("Spectate")


 local Players = game:GetService("Players")
local playerNames = {}
local selectedPlayer = nil
local camera = workspace.CurrentCamera

-- Collect all player names
for _, player in ipairs(Players:GetPlayers()) do
    table.insert(playerNames, player.Name)
end

local Dropdown = Sigmas:CreateDropdown({
   Name = "Player List",
   Options = playerNames, -- Set the player names as options
   CurrentOption = {playerNames[1]}, -- Set the first player as the current option
   MultipleOptions = false,
   Flag = "Dropdown1",
   Callback = function(Options)
       selectedPlayer = Players:FindFirstChild(Options[1]) -- Store the selected player
       print("Selected player: " .. Options[1])
   end,
})

-- Update the dropdown whenever a new player joins
Players.PlayerAdded:Connect(function(player)
    table.insert(playerNames, player.Name)
    Dropdown:UpdateOptions(playerNames) -- Updates the dropdown options
end)

-- Remove a player from the dropdown if they leave
Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(playerNames) do
        if name == player.Name then
            table.remove(playerNames, i)
            break
        end
    end
    Dropdown:UpdateOptions(playerNames) -- Updates the dropdown options
end)

-- Button to view the selected player
local Button = Sigmas:CreateButton({
   Name = "View Player",
   Callback = function()
       if selectedPlayer and selectedPlayer.Character then
           -- Set the camera's subject to the selected player's humanoid
           camera.CameraSubject = selectedPlayer.Character:FindFirstChild("Humanoid")
           print("Now viewing: " .. selectedPlayer.Name)
       else
           print("No player selected or player does not have a character")
       end
   end,
})

-- Button to unview (reset camera back to the player)
local UnviewButton = Sigmas:CreateButton({
   Name = "Unview Player",
   Callback = function()
       -- Set the camera back to the local player's humanoid
       local localPlayer = Players.LocalPlayer
       if localPlayer and localPlayer.Character then
           camera.CameraSubject = localPlayer.Character:FindFirstChild("Humanoid")
           print("Camera reset to local player")
       else
           print("Local player does not have a character")
       end
   end,
})

local Button = Sigmas:CreateButton({
    Name = "Teleport",
    Callback = function()
        if selectedPlayer and selectedPlayer.Character then
            -- Get the LocalPlayer's HumanoidRootPart
            local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
            warn(YourRoot.CFrame)
        
            -- Get the selected player's HumanoidRootPart
            local selectedPlayerRoot = selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
        
            if selectedPlayerRoot then
                -- Get the CFrame of the selected player's HumanoidRootPart
                local LocationToTP = selectedPlayerRoot.CFrame
                YourRoot.CFrame = LocationToTP -- Teleport the LocalPlayer to the selected player's location
            else
                warn("Selected player does not have a HumanoidRootPart.")
            end
        else
            warn("No selected player or the selected player does not have a character.")
        end
        
    end,
 })



 local Players = game:GetService("Players")
 local RunService = game:GetService("RunService")
 local Camera = workspace.CurrentCamera
 local LocalPlayer = Players.LocalPlayer
 
 local espEnabled = false
 local playerBoxes = {} -- Store boxes for all players
 local playerHealthBars = {} -- Store health bars for all players
 local playerNames = {} -- Store name displays for all players
 
 -- Function to create a box using the Drawing API
 local function createBox()
     local box = Drawing.new("Square")
     box.Thickness = 2
     box.Color = Color3.new(1, 0, 0) -- Red
     box.Transparency = 1
     box.Filled = false
     box.Visible = false
     return box
 end
 
 -- Function to create a health bar using the Drawing API
 local function createHealthBar()
     local healthBar = Drawing.new("Square")
     healthBar.Thickness = 1
     healthBar.Color = Color3.new(0, 1, 0) -- Green (for full health)
     healthBar.Transparency = 1
     healthBar.Filled = true
     healthBar.Visible = false
     return healthBar
 end
 
 -- Function to create a name tag
 local function createNameTag()
     local nameTag = Drawing.new("Text")
     nameTag.Size = 16 -- Slightly larger
     nameTag.Color = Color3.new(1, 1, 1) -- White
     nameTag.Transparency = 1
     nameTag.Center = true -- Center the text
     nameTag.Outline = true -- Add an outline for better visibility
     nameTag.Visible = false
     return nameTag
 end
 
 -- Toggle ESP visibility
 local function toggleESP(state)
     espEnabled = state
     if not espEnabled then
         -- Hide all ESP elements when disabled
         for _, box in pairs(playerBoxes) do
             box.Visible = false
         end
         for _, healthBar in pairs(playerHealthBars) do
             healthBar.Visible = false
         end
         for _, nameTag in pairs(playerNames) do
             nameTag.Visible = false
         end
     end
 end
 
 -- Update ESP elements for each player
 RunService.RenderStepped:Connect(function()
     if not espEnabled then return end
 
     for _, player in ipairs(Players:GetPlayers()) do
         if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
             local character = player.Character
             local humanoid = character:FindFirstChild("Humanoid")
             local head = character:FindFirstChild("Head")
             local box = playerBoxes[player] or createBox()
             local healthBar = playerHealthBars[player] or createHealthBar()
             local nameTag = playerNames[player] or createNameTag()
 
             -- Create the ESP elements if they don't exist
             if not playerBoxes[player] then playerBoxes[player] = box end
             if not playerHealthBars[player] then playerHealthBars[player] = healthBar end
             if not playerNames[player] then playerNames[player] = nameTag end
 
             if head and humanoid and humanoid.Health > 0 then
                 -- Get the position of the player's head and torso
                 local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
                 local torsoPos = character:FindFirstChild("HumanoidRootPart").Position
                 local distance = (LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - torsoPos).Magnitude
 
                 -- Scale down the ESP elements based on distance
                 local scaleFactor = math.clamp(1 / (distance / 10), 0.4, 1) -- Clamps scale between 0.4 and 1
 
                 if onScreen then
                     -- Update the box position and size (scaled)
                     box.Size = Vector2.new(75 * scaleFactor, 100 * scaleFactor) -- Smaller box around the player
                     box.Position = Vector2.new(screenPos.X - (37.5 * scaleFactor), screenPos.Y - (50 * scaleFactor))
                     box.Visible = true
 
                     -- Update the health bar position and size (scaled)
                     local healthPercent = humanoid.Health / humanoid.MaxHealth
                     healthBar.Size = Vector2.new(5 * scaleFactor, 100 * scaleFactor * healthPercent) -- Height proportional to health
                     healthBar.Position = Vector2.new(box.Position.X - (10 * scaleFactor), box.Position.Y + (100 * scaleFactor * (1 - healthPercent))) -- Align next to box
                     healthBar.Color = Color3.new(1 - healthPercent, healthPercent, 0) -- Red to green based on health
                     healthBar.Visible = true
 
                     -- Update the name tag position (scaled)
                     nameTag.Position = Vector2.new(screenPos.X, screenPos.Y - (60 * scaleFactor)) -- Above the box
                     nameTag.Size = 16 * scaleFactor -- Scale the font size
                     nameTag.Text = player.Name -- Show the player's name
                     nameTag.Visible = true
                 else
                     box.Visible = false
                     healthBar.Visible = false
                     nameTag.Visible = false
                 end
             else
                 box.Visible = false
                 healthBar.Visible = false
                 nameTag.Visible = false
             end
         elseif playerBoxes[player] then
             -- Hide boxes and tags for players without valid characters
             playerBoxes[player].Visible = false
             playerHealthBars[player].Visible = false
             playerNames[player].Visible = false
         end
     end
 end)
 
 -- Cleanup boxes and tags when players leave
 Players.PlayerRemoving:Connect(function(player)
     if playerBoxes[player] then
         playerBoxes[player]:Remove()
         playerBoxes[player] = nil
     end
     if playerHealthBars[player] then
         playerHealthBars[player]:Remove()
         playerHealthBars[player] = nil
     end
     if playerNames[player] then
         playerNames[player]:Remove()
         playerNames[player] = nil
     end
 end)
 
 
 -- Player ESP with Tracers, Boxes, and Usernames
 -- Highlights all players with tracers, boxes, and their usernames
 
 local Players = game:GetService("Players")
 local LocalPlayer = Players.LocalPlayer
 local Camera = workspace.CurrentCamera
 local RunService = game:GetService("RunService")
 
 local espEnabled = false -- Toggle state
 local tracerColor = Color3.fromRGB(255, 255, 255) -- Tracer color set to white
 local boxColor = Color3.fromRGB(255, 255, 255) -- Box color set to white
 local usernameColor = Color3.fromRGB(255, 255, 255) -- Username color set to white
 local transparency = 0.5 -- General transparency
 local tracers = {} -- Store tracers for players
 local boxes = {} -- Store boxes for players
 local usernames = {} -- Store usernames for players
 
 -- Create ESP elements for a player
 local function createESP(player)
     local tracer = Drawing.new("Line")
     tracer.Visible = false
     tracer.Color = tracerColor
     tracer.Thickness = 1
     tracer.Transparency = transparency
     tracers[player] = tracer
 
     local box = Drawing.new("Square")
     box.Visible = false
     box.Color = boxColor
     box.Thickness = 1
     box.Transparency = transparency
     boxes[player] = box
 
     local username = Drawing.new("Text")
     username.Visible = false
     username.Color = usernameColor
     username.Size = 14 -- Reduced the size here
     username.Center = true
     username.Outline = true
     usernames[player] = username
 end
 
 -- Remove ESP elements for a player
 local function removeESP(player)
     if tracers[player] then
         tracers[player]:Remove()
         tracers[player] = nil
     end
     if boxes[player] then
         boxes[player]:Remove()
         boxes[player] = nil
     end
     if usernames[player] then
         usernames[player]:Remove()
         usernames[player] = nil
     end
 end
 
 -- Update ESP dynamically
 local function updateESP()
     for player, tracer in pairs(tracers) do
         if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player ~= LocalPlayer then
             local rootPart = player.Character.HumanoidRootPart
             local head = player.Character:FindFirstChild("Head")
 
             local partPosition, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
             local headPosition = head and Camera:WorldToViewportPoint(head.Position) or nil
 
             if onScreen then
                 -- Update tracer
                 tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y) -- Bottom center of the screen
                 tracer.To = Vector2.new(partPosition.X, partPosition.Y)
                 tracer.Visible = espEnabled
 
                 -- Update box
                 local size = Vector3.new(4, 6, 0) -- Adjust size for the box
                 local boxSize = (Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(size.X, size.Y, 0)) - 
                                  Camera:WorldToViewportPoint(rootPart.Position - Vector3.new(size.X, size.Y, 0))).magnitude
                 boxes[player].Position = Vector2.new(partPosition.X - boxSize / 2, partPosition.Y - boxSize / 2)
                 boxes[player].Size = Vector2.new(boxSize, boxSize * 1.5) -- Adjust height ratio
                 boxes[player].Visible = espEnabled
 
                 -- Update username
                 if headPosition then
                     usernames[player].Position = Vector2.new(headPosition.X, headPosition.Y - 20)
                     usernames[player].Text = player.Name
                     usernames[player].Visible = espEnabled
                 end
             else
                 tracer.Visible = false
                 boxes[player].Visible = false
                 usernames[player].Visible = false
             end
         else
             tracer.Visible = false
             boxes[player].Visible = false
             usernames[player].Visible = false
         end
     end
 end
 
 -- Enable ESP
 local function enableESP()
     espEnabled = true
     for _, player in ipairs(Players:GetPlayers()) do
         if not tracers[player] then
             createESP(player)
         end
     end
 end
 
 -- Disable ESP
 local function disableESP()
     espEnabled = false
     for _, tracer in pairs(tracers) do
         tracer.Visible = false
     end
     for _, box in pairs(boxes) do
         box.Visible = false
     end
     for _, username in pairs(usernames) do
         username.Visible = false
     end
 end
 
 -- Handle player additions
 Players.PlayerAdded:Connect(function(player)
     createESP(player)
 end)
 
 -- Handle player removals
 Players.PlayerRemoving:Connect(function(player)
     removeESP(player)
 end)
 
 -- GUI Toggle
 local Toggle = Sigma:CreateToggle({
    Name = "Toggle Example",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
       if state then
        enableESP()
       else
        disableESP()
       end
    end,
 })
 
 -- Continuous updates
 RunService.RenderStepped:Connect(function()
     if espEnabled then
         updateESP()
     end
 end)
 
 print("[ESP] Player ESP with Tracers, Boxes, and Usernames loaded.")
 
 
 -- GUI toggle button for ESP
 local Toggle = Sigma:CreateToggle({
     Name = "Toggle Example",
     CurrentValue = false,
     Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
     Callback = function(state)
        toggleESP(state)
     end,
  })


 



 
