local library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
local Wait = library.subs.Wait -- Only returns if the GUI has not been terminated. For 'while Wait() do' loops

local PepsisWorld = library:CreateWindow({
Name = "PeperCondom",
Themeable = {
Info = "Discord Server: VzYTJ7Y"
}
})

local GeneralTab = PepsisWorld:CreateTab({
Name = "Main"
})

local VisualsSection = GeneralTab:CreateSection({
    Name = "Visuals"
 })

 local Players = game:GetService("Players")
 local RunService = game:GetService("RunService")
 local Camera = workspace.CurrentCamera
 local UserInputService = game:GetService("UserInputService")
 
 local skeletonEnabled = false -- ESP starts off
 local playerLines = {} -- Stores drawing lines for all players
 local playerTags = {} -- Stores name tags for each player
 
 -- Body parts to connect for skeleton
 local bodyParts = {
     { "Head", "UpperTorso" },
     { "UpperTorso", "LowerTorso" },
     { "LeftUpperArm", "LeftLowerArm" },
     { "LeftLowerArm", "LeftHand" },
     { "RightUpperArm", "RightLowerArm" },
     { "RightLowerArm", "RightHand" },
     { "LeftUpperLeg", "LeftLowerLeg" },
     { "LeftLowerLeg", "LeftFoot" },
     { "RightUpperLeg", "RightLowerLeg" },
     { "RightLowerLeg", "RightFoot" },
     { "UpperTorso", "LeftUpperArm" },
     { "UpperTorso", "RightUpperArm" },
     { "LowerTorso", "LeftUpperLeg" },
     { "LowerTorso", "RightUpperLeg" },
 }
 
 -- Function to create a line using the Drawing API
 local function createLine()
     local line = Drawing.new("Line")
     line.Thickness = 1.5
     line.Color = Color3.new(1, 1, 1) -- White
     line.Transparency = 1
     line.Visible = false
     return line
 end
 
 -- Function to create a name tag for each player
 local function createNameTag()
     local nameTag = Drawing.new("Text")
     nameTag.Size = 14 -- Adjust the size to be readable
     nameTag.Color = Color3.new(1, 1, 1) -- White
     nameTag.Transparency = 1
     nameTag.Center = true -- Centers the text above the player's head
     nameTag.Outline = true -- Adds an outline for better visibility
     nameTag.Visible = false
     return nameTag
 end
 
 -- Toggle ESP visibility
 local function toggleESP(state)
     skeletonEnabled = state
     if not skeletonEnabled then
         -- Hide all lines and tags when ESP is disabled
         for _, lines in pairs(playerLines) do
             for _, line in pairs(lines) do
                 line.Visible = false
             end
         end
         for _, nameTag in pairs(playerTags) do
             nameTag.Visible = false
         end
     end
 end
 
 -- Render ESP on each frame
 RunService.RenderStepped:Connect(function()
     if not skeletonEnabled then return end
 
     for _, player in ipairs(Players:GetPlayers()) do
         if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
             local character = player.Character
             local humanoid = character:FindFirstChild("Humanoid")
             local head = character:FindFirstChild("Head")
             local nameTag = playerTags[player] or createNameTag()
 
             -- Create the name tag if it doesn't exist
             if not playerTags[player] then
                 playerTags[player] = nameTag
             end
 
             if head and humanoid and humanoid.Health > 0 then
                 -- Update the position and text of the name tag
                 local screenPos = Camera:WorldToViewportPoint(head.Position)
                 if screenPos.Z > 0 then
                     nameTag.Position = Vector2.new(screenPos.X, screenPos.Y - 25) -- Above the head
                     nameTag.Text = player.Name -- Set the username
                     nameTag.Visible = true
                 else
                     nameTag.Visible = false
                 end
 
                 playerLines[player] = playerLines[player] or {}
                 local lineIndex = 1
 
                 -- Draw skeleton lines
                 for _, connection in ipairs(bodyParts) do
                     local part1 = character:FindFirstChild(connection[1])
                     local part2 = character:FindFirstChild(connection[2])
 
                     if part1 and part2 then
                         local line = playerLines[player][lineIndex] or createLine()
                         playerLines[player][lineIndex] = line
 
                         local pos1, onScreen1 = Camera:WorldToViewportPoint(part1.Position)
                         local pos2, onScreen2 = Camera:WorldToViewportPoint(part2.Position)
 
                         if onScreen1 and onScreen2 then
                             line.From = Vector2.new(pos1.X, pos1.Y)
                             line.To = Vector2.new(pos2.X, pos2.Y)
                             line.Visible = true
                         else
                             line.Visible = false
                         end
                     end
 
                     lineIndex = lineIndex + 1
                 end
 
                 -- Hide unused lines for this player
                 for i = lineIndex, #playerLines[player] do
                     if playerLines[player][i] then
                         playerLines[player][i].Visible = false
                     end
                 end
             else
                 nameTag.Visible = false
             end
         elseif playerLines[player] then
             -- Hide lines and tags for players without valid characters
             for _, line in pairs(playerLines[player]) do
                 line.Visible = false
             end
             if playerTags[player] then
                 playerTags[player].Visible = false
             end
         end
     end
 end)
 
 -- Cleanup lines and tags when players leave
 Players.PlayerRemoving:Connect(function(player)
     if playerLines[player] then
         for _, line in pairs(playerLines[player]) do
             line:Remove()
         end
         playerLines[player] = nil
     end
     if playerTags[player] then
         playerTags[player]:Remove()
         playerTags[player] = nil
     end
 end)
 
 -- GUI toggle button for ESP
 VisualsSection:AddToggle({
     Name = 'Skeleton Esp',
     Flag = 'FarmingSection_ToggleESP',
     Callback = function(state)
         toggleESP(state)
     end
 })

 local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local espEnabled = false
local playerBoxes = {} -- Store boxes for all players
local playerHealthBars = {} -- Store health bars for all players
local playerNames = {} -- Store name displays for all players

-- Function to create a box using the Drawing API
local function createBox()
    local box = Drawing.new("Square")
    box.Thickness = 2
    box.Color = Color3.new(1, 0, 0) -- Red
    box.Transparency = 1
    box.Filled = false
    box.Visible = false
    return box
end

-- Function to create a health bar using the Drawing API
local function createHealthBar()
    local healthBar = Drawing.new("Square")
    healthBar.Thickness = 1
    healthBar.Color = Color3.new(0, 1, 0) -- Green (for full health)
    healthBar.Transparency = 1
    healthBar.Filled = true
    healthBar.Visible = false
    return healthBar
end

-- Function to create a name tag
local function createNameTag()
    local nameTag = Drawing.new("Text")
    nameTag.Size = 16 -- Slightly larger
    nameTag.Color = Color3.new(1, 1, 1) -- White
    nameTag.Transparency = 1
    nameTag.Center = true -- Center the text
    nameTag.Outline = true -- Add an outline for better visibility
    nameTag.Visible = false
    return nameTag
end

-- Toggle ESP visibility
local function toggleESP(state)
    espEnabled = state
    if not espEnabled then
        -- Hide all ESP elements when disabled
        for _, box in pairs(playerBoxes) do
            box.Visible = false
        end
        for _, healthBar in pairs(playerHealthBars) do
            healthBar.Visible = false
        end
        for _, nameTag in pairs(playerNames) do
            nameTag.Visible = false
        end
    end
end

-- Update ESP elements for each player
RunService.RenderStepped:Connect(function()
    if not espEnabled then return end

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
            local character = player.Character
            local humanoid = character:FindFirstChild("Humanoid")
            local head = character:FindFirstChild("Head")
            local box = playerBoxes[player] or createBox()
            local healthBar = playerHealthBars[player] or createHealthBar()
            local nameTag = playerNames[player] or createNameTag()

            -- Create the ESP elements if they don't exist
            if not playerBoxes[player] then playerBoxes[player] = box end
            if not playerHealthBars[player] then playerHealthBars[player] = healthBar end
            if not playerNames[player] then playerNames[player] = nameTag end

            if head and humanoid and humanoid.Health > 0 then
                -- Get the position of the player's head and torso
                local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
                local torsoPos = character:FindFirstChild("HumanoidRootPart").Position
                local distance = (LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - torsoPos).Magnitude

                -- Scale down the ESP elements based on distance
                local scaleFactor = math.clamp(1 / (distance / 10), 0.4, 1) -- Clamps scale between 0.4 and 1

                if onScreen then
                    -- Update the box position and size (scaled)
                    box.Size = Vector2.new(75 * scaleFactor, 100 * scaleFactor) -- Smaller box around the player
                    box.Position = Vector2.new(screenPos.X - (37.5 * scaleFactor), screenPos.Y - (50 * scaleFactor))
                    box.Visible = true

                    -- Update the health bar position and size (scaled)
                    local healthPercent = humanoid.Health / humanoid.MaxHealth
                    healthBar.Size = Vector2.new(5 * scaleFactor, 100 * scaleFactor * healthPercent) -- Height proportional to health
                    healthBar.Position = Vector2.new(box.Position.X - (10 * scaleFactor), box.Position.Y + (100 * scaleFactor * (1 - healthPercent))) -- Align next to box
                    healthBar.Color = Color3.new(1 - healthPercent, healthPercent, 0) -- Red to green based on health
                    healthBar.Visible = true

                    -- Update the name tag position (scaled)
                    nameTag.Position = Vector2.new(screenPos.X, screenPos.Y - (60 * scaleFactor)) -- Above the box
                    nameTag.Size = 16 * scaleFactor -- Scale the font size
                    nameTag.Text = player.Name -- Show the player's name
                    nameTag.Visible = true
                else
                    box.Visible = false
                    healthBar.Visible = false
                    nameTag.Visible = false
                end
            else
                box.Visible = false
                healthBar.Visible = false
                nameTag.Visible = false
            end
        elseif playerBoxes[player] then
            -- Hide boxes and tags for players without valid characters
            playerBoxes[player].Visible = false
            playerHealthBars[player].Visible = false
            playerNames[player].Visible = false
        end
    end
end)

-- Cleanup boxes and tags when players leave
Players.PlayerRemoving:Connect(function(player)
    if playerBoxes[player] then
        playerBoxes[player]:Remove()
        playerBoxes[player] = nil
    end
    if playerHealthBars[player] then
        playerHealthBars[player]:Remove()
        playerHealthBars[player] = nil
    end
    if playerNames[player] then
        playerNames[player]:Remove()
        playerNames[player] = nil
    end
end)


-- Player ESP with Tracers, Boxes, and Usernames
-- Highlights all players with tracers, boxes, and their usernames

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")

local espEnabled = false -- Toggle state
local tracerColor = Color3.fromRGB(255, 255, 255) -- Tracer color set to white
local boxColor = Color3.fromRGB(255, 255, 255) -- Box color set to white
local usernameColor = Color3.fromRGB(255, 255, 255) -- Username color set to white
local transparency = 0.5 -- General transparency
local tracers = {} -- Store tracers for players
local boxes = {} -- Store boxes for players
local usernames = {} -- Store usernames for players

-- Create ESP elements for a player
local function createESP(player)
    local tracer = Drawing.new("Line")
    tracer.Visible = false
    tracer.Color = tracerColor
    tracer.Thickness = 1
    tracer.Transparency = transparency
    tracers[player] = tracer

    local box = Drawing.new("Square")
    box.Visible = false
    box.Color = boxColor
    box.Thickness = 1
    box.Transparency = transparency
    boxes[player] = box

    local username = Drawing.new("Text")
    username.Visible = false
    username.Color = usernameColor
    username.Size = 14 -- Reduced the size here
    username.Center = true
    username.Outline = true
    usernames[player] = username
end

-- Remove ESP elements for a player
local function removeESP(player)
    if tracers[player] then
        tracers[player]:Remove()
        tracers[player] = nil
    end
    if boxes[player] then
        boxes[player]:Remove()
        boxes[player] = nil
    end
    if usernames[player] then
        usernames[player]:Remove()
        usernames[player] = nil
    end
end

-- Update ESP dynamically
local function updateESP()
    for player, tracer in pairs(tracers) do
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player ~= LocalPlayer then
            local rootPart = player.Character.HumanoidRootPart
            local head = player.Character:FindFirstChild("Head")

            local partPosition, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
            local headPosition = head and Camera:WorldToViewportPoint(head.Position) or nil

            if onScreen then
                -- Update tracer
                tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y) -- Bottom center of the screen
                tracer.To = Vector2.new(partPosition.X, partPosition.Y)
                tracer.Visible = espEnabled

                -- Update box
                local size = Vector3.new(4, 6, 0) -- Adjust size for the box
                local boxSize = (Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(size.X, size.Y, 0)) - 
                                 Camera:WorldToViewportPoint(rootPart.Position - Vector3.new(size.X, size.Y, 0))).magnitude
                boxes[player].Position = Vector2.new(partPosition.X - boxSize / 2, partPosition.Y - boxSize / 2)
                boxes[player].Size = Vector2.new(boxSize, boxSize * 1.5) -- Adjust height ratio
                boxes[player].Visible = espEnabled

                -- Update username
                if headPosition then
                    usernames[player].Position = Vector2.new(headPosition.X, headPosition.Y - 20)
                    usernames[player].Text = player.Name
                    usernames[player].Visible = espEnabled
                end
            else
                tracer.Visible = false
                boxes[player].Visible = false
                usernames[player].Visible = false
            end
        else
            tracer.Visible = false
            boxes[player].Visible = false
            usernames[player].Visible = false
        end
    end
end

-- Enable ESP
local function enableESP()
    espEnabled = true
    for _, player in ipairs(Players:GetPlayers()) do
        if not tracers[player] then
            createESP(player)
        end
    end
end

-- Disable ESP
local function disableESP()
    espEnabled = false
    for _, tracer in pairs(tracers) do
        tracer.Visible = false
    end
    for _, box in pairs(boxes) do
        box.Visible = false
    end
    for _, username in pairs(usernames) do
        username.Visible = false
    end
end

-- Handle player additions
Players.PlayerAdded:Connect(function(player)
    createESP(player)
end)

-- Handle player removals
Players.PlayerRemoving:Connect(function(player)
    removeESP(player)
end)

-- GUI Toggle
VisualsSection:AddToggle({
    Name = "Tracer Esp",
    Flag = "FarmingSection_PlayerESP",
    Callback = function(state)
        if state then
            enableESP()
        else
            disableESP()
        end
    end,
})

-- Continuous updates
RunService.RenderStepped:Connect(function()
    if espEnabled then
        updateESP()
    end
end)

print("[ESP] Player ESP with Tracers, Boxes, and Usernames loaded.")


-- GUI toggle button for ESP
VisualsSection:AddToggle({
    Name = 'Square Esp',
    Flag = 'FarmingSection_TogglePlayerESP',
    Callback = function(state)
        toggleESP(state)
    end
})


--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

--// Variables
local ESPEnabled = false
local NameTags = {}

-- Function to create a nametag above a player's head
local function createNameTag(player)
    if player.Character and player.Character:FindFirstChild("Head") then
        local head = player.Character.Head
        if not NameTags[player] then
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "NameTag"
            billboard.Parent = head
            billboard.Adornee = head
            billboard.Size = UDim2.new(0, 100, 0, 20)
            billboard.StudsOffset = Vector3.new(0, 2, 0)
            billboard.AlwaysOnTop = true

            local textLabel = Instance.new("TextLabel")
            textLabel.Parent = billboard
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.Text = player.Name
            textLabel.TextColor3 = Color3.new(1, 1, 1)
            textLabel.TextStrokeTransparency = 0.5
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.TextScaled = true

            NameTags[player] = billboard
        end
    end
end

-- Function to remove a nametag
local function removeNameTag(player)
    if NameTags[player] then
        NameTags[player]:Destroy()
        NameTags[player] = nil
    end
end

-- Function to toggle ESP on or off
local function toggleESP(enabled)
    ESPEnabled = enabled
    if ESPEnabled then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer then
                createNameTag(player)
            end
        end
    else
        for player, billboard in pairs(NameTags) do
            removeNameTag(player)
        end
    end
end

-- Listen for player addition/removal
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if ESPEnabled then
            createNameTag(player)
        end
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    removeNameTag(player)
end)

-- Update NameTags when characters are added
if ESPEnabled then
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character then
            createNameTag(player)
        end
    end
end

-- GUI Toggle Button Implementation
local FarmingSection = {} -- Assume this is your GUI section implementation

VisualsSection:AddToggle({
    Name = "Name Esp",
    Flag = "FarmingSection_ShowNames",
    Callback = function(state)
        toggleESP(state)
    end
})


 
-- ATM ESP Script with GUI Toggle
-- Highlights all ATMs in the game world with a toggle button

local ATMs = {} -- Table to store found ATMs
local highlightColor = Color3.fromRGB(0, 0, 0) -- Green color for the ESP
local espEnabled = false -- Toggle state

-- Function to create a highlight
local function createHighlight(item)
    if item:FindFirstChild("Highlight") then return end -- Avoid duplicates

    local highlight = Instance.new("Highlight")
    highlight.Parent = item
    highlight.Adornee = item
    highlight.FillColor = highlightColor
    highlight.OutlineTransparency = 0.5
    highlight.FillTransparency = 0.7
end

-- Function to remove highlights
local function removeHighlight(item)
    if item:FindFirstChild("Highlight") then
        item.Highlight:Destroy()
    end
end

-- Function to toggle ESP on or off
local function toggleESP(state)
    espEnabled = state

    if espEnabled then
        for _, atm in pairs(ATMs) do
            createHighlight(atm)
        end
    else
        for _, atm in pairs(ATMs) do
            removeHighlight(atm)
        end
    end
end

-- Function to find all ATMs
local function findATMs()
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj.Name:lower():find("atm") and obj:IsA("Model") then -- Check if it's an ATM
            table.insert(ATMs, obj)
            if espEnabled then
                createHighlight(obj)
            end
        end
    end
end

-- Update ESP when new objects are added
workspace.DescendantAdded:Connect(function(obj)
    if obj.Name:lower():find("ATM") and obj:IsA("Model") then
        table.insert(ATMs, obj)
        if espEnabled then
            createHighlight(obj)
        end
    end
end)

-- Initial scan for ATMs
findATMs()

-- GUI Toggle Button
VisualsSection:AddToggle({
    Name = "Atm Esp",
    Flag = "FarmingSection_ATMESP",
    Callback = function(state)
        toggleESP(state)
    end
})

print("[ESP] ATM ESP script loaded with GUI toggle.")



---------------------------------------------------------------------------------------------------------
 local PlayerSection = GeneralTab:CreateSection({
    Name = "Player"
 })


 PlayerSection:AddButton({
    Name = "Inf Sleep",
    Callback = function()
        game.Players.LocalPlayer.PlayerGui.SleepGui.Frame.sleep.SleepBar["sleepScript"].Disabled = true
    end
    })

 PlayerSection:AddButton({
     Name = "Inf Stamina",
        Callback = function()
            game.Players.LocalPlayer.PlayerGui.Run.Frame.Frame.Frame["StaminaBarScript"].Disabled = true
    end
 })


  PlayerSection:AddButton({
         Name = "Inf Hunger",
            Callback = function()
                game.Players.LocalPlayer.PlayerGui.Hunger.Frame.Frame.Frame["HungerBarScript"].Disabled = true
    end
    })


 PlayerSection:AddButton({
    Name = "Instant ProxmityPrompts",
    Callback = function()
        local function ProximityPromptDuration(HoldDur)
            for i,v in workspace:GetDescendants() do
                 if v:IsA("ProximityPrompt") then
                     v.HoldDuration = HoldDur
                 end
            end
         end
 
         ProximityPromptDuration(0)
 
        workspace.DescendantAdded:Connect(function(Added)
             if Added:IsA("ProximityPrompt") then
                 ProximityPromptDuration(0)
             end
        end)
    end
    })


    local GuisSection = GeneralTab:CreateSection({
        Name = "Gui"
     })

     GuisSection:AddButton({
        Name = "Market Gui",
        Callback = function()
            game.Players.LocalPlayer.PlayerGui["Bronx Market 2"].Enabled = true 
        end
        })

        GuisSection:AddButton({
            Name = "Exotic Gui",
            Callback = function()
                game.Players.LocalPlayer.PlayerGui["Exotic Shop"].Enabled = true
            end
            })

            GuisSection:AddButton({
                Name = "Shop Gui",
                Callback = function()
                    game.Players.LocalPlayer.PlayerGui["ShopGUI"].Enabled = true
                end
                })


                local HitboxSection = GeneralTab:CreateSection({
                    Name = "Hitbox"
                 })

                 -- Flag to track the toggle state
local isHitboxExpanded = false

-- Function to expand hitboxes
local function expandHitboxes()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character then -- Exclude the local player
            for _, part in pairs(player.Character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.Size = part.Size + Vector3.new(3, 3, 3) -- Adjust the increment as needed
                end
            end
        end
    end
end

-- Function to reset hitboxes to their original size
local function resetHitboxes()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character then -- Exclude the local player
            for _, part in pairs(player.Character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.Size = part.Size - Vector3.new(3, 3, 3) -- Ensure this matches the increment used in expandHitboxes
                end
            end
        end
    end
end

-- Adding the toggle to the FarmingSection
HitboxSection:AddToggle({
    Name = "Hitbox Humanoid",
    Flag = "VisualsSection_ExpandHitboxes",
    Callback = function(state)
        isHitboxExpanded = state
        if isHitboxExpanded then
            expandHitboxes()
        else
            resetHitboxes()
        end
    end
})



local hitboxEnabled = false

-- Function to toggle hitbox for other players
local function toggleHitbox(state)
    hitboxEnabled = state
    local player = game.Players.LocalPlayer
    local players = game:GetService('Players')
    
    for _, otherPlayer in pairs(players:GetPlayers()) do
        if otherPlayer ~= player then
            local character = otherPlayer.Character or otherPlayer.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            
            if hitboxEnabled then
                -- Increase the hitbox size and apply transparency and color for other players
                humanoidRootPart.Size = Vector3.new(10, 10, 10) -- Larger hitbox
                humanoidRootPart.Transparency = 0.7 -- 70% transparency
                humanoidRootPart.BrickColor = BrickColor.new('Bright blue') -- Blue color
                humanoidRootPart.CanCollide = false -- Disable collisions
                print('Hitbox enabled for', otherPlayer.Name)
            else
                -- Reset hitbox size and settings for other players
                humanoidRootPart.Size = Vector3.new(2, 2, 1) -- Default size
                humanoidRootPart.Transparency = 1 -- Reset transparency
                humanoidRootPart.BrickColor = BrickColor.new('Medium stone grey') -- Default color
                humanoidRootPart.CanCollide = true
                print('Hitbox disabled for', otherPlayer.Name)
            end
        end
    end
end

-- GUI toggle button for hitbox
HitboxSection:AddToggle({
    Name = 'Hitbox Box',
    Flag = 'FarmingSection_ToggleHitbox',
    Callback = function(state)
        toggleHitbox(state)
    end
})


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local originalSizes = {} -- Store original head sizes for all players
local hitboxEnabled = false

-- Function to scale the head hitbox
local function scaleHeadHitbox(player, scale)
    if player.Character and player.Character:FindFirstChild("Head") then
        local head = player.Character.Head
        if not originalSizes[player] then
            originalSizes[player] = head.Size -- Save original size if not already saved
        end
        head.Size = originalSizes[player] * scale -- Scale the head
        head.CanCollide = false -- Disable collision for fairness
    end
end

-- Function to reset the head hitbox to its original size
local function resetHeadHitbox(player)
    if player.Character and player.Character:FindFirstChild("Head") then
        local head = player.Character.Head
        if originalSizes[player] then
            head.Size = originalSizes[player] -- Reset to original size
        end
    end
end

-- Toggle the hitbox scaling on or off
local function toggleHitbox(state)
    hitboxEnabled = state
    if not hitboxEnabled then
        -- Reset hitboxes when disabled
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                resetHeadHitbox(player)
            end
        end
    end
end

-- Apply the hitbox scaling to a player's character
local function applyHitboxScaling(player)
    player.CharacterAdded:Connect(function(character)
        -- Wait for the character's head to load properly before scaling
        local head = character:WaitForChild("Head", 10) -- 10 second timeout in case of issues
        if head and hitboxEnabled then
            scaleHeadHitbox(player, 2) -- Make the head hitbox twice as big
        end
    end)

    -- Scale hitbox for already loaded characters
    if player.Character then
        scaleHeadHitbox(player, 2)
    end
end

-- Apply hitbox scaling to all players, including new and respawned ones
local function applyHitboxScalingToAll()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            applyHitboxScaling(player)
        end
    end
end

-- Update the hitboxes for players when enabled
RunService.RenderStepped:Connect(function()
    if hitboxEnabled then
        applyHitboxScalingToAll()
    end
end)

-- Ensure that the head hitbox is scaled for new players who join
Players.PlayerAdded:Connect(function(player)
    if hitboxEnabled then
        applyHitboxScaling(player)
    end
end)

-- Reset hitbox when players leave
Players.PlayerRemoving:Connect(function(player)
    resetHeadHitbox(player)
end)

-- GUI toggle button for hitbox scaling
HitboxSection:AddToggle({
    Name = 'Bigger Head',
    Flag = 'FarmingSection_ToggleHeadHitbox',
    Callback = function(state)
        toggleHitbox(state)
        if hitboxEnabled then
            applyHitboxScalingToAll() -- Apply to all existing players when toggled on
        end
    end
})


-------------------------------------------------------------------------------------------
local SecondTab = PepsisWorld:CreateTab({
Name = "Teleports"
})

local tpSection = SecondTab:CreateSection({
    Name = "Teleporting"
})

tpSection:AddButton({
Name = "Rice Buy",
Callback = function()
local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
--warn(YourRoot.CFrame)
--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
local LocationToTP2 = CFrame.new(51373, 21680, 5842)
YourRoot.CFrame = LocationToTP2
end
})


  tpSection:AddButton({
 Name = "Rice Sell",
 Callback = function()
local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
--warn(YourRoot.CFrame)
--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
 local LocationToTP2 = CFrame.new(81062.2422, 133135.266, 169.988525, 0.766061246, -0, -0.642767608, 0, 1, -0, 0.642767608, 0, 0.766061246)
YourRoot.CFrame = LocationToTP2
end
})

tpSection:AddButton({
Name = "Gun Shop 1",
Callback = function()
local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
--warn(YourRoot.CFrame)
--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
local LocationToTP2 = CFrame.new(92971, 122098, 17024)
YourRoot.CFrame = LocationToTP2 
end
})

tpSection:AddButton({
Name = "Gun Shop 2",
Callback = function()
local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
--warn(YourRoot.CFrame)
--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
local LocationToTP2 = CFrame.new(66203, 123616, 5750)
YourRoot.CFrame = LocationToTP2
end
})

tpSection:AddButton({
Name = "Exotic Guns",
Callback = function()
local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
--warn(YourRoot.CFrame)
--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
local LocationToTP2 = CFrame.new(60841, 87609, -354)
YourRoot.CFrame = LocationToTP2
end
})     


tpSection:AddButton({
    Name = "Laundry",
    Callback = function()
        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
		--warn(YourRoot.CFrame)
		--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
		local LocationToTP2 = CFrame.new(-977, 254, -676)
		YourRoot.CFrame = LocationToTP2
    end
    })   
    
    

tpSection:AddButton({
 Name = "Bank",
 Callback = function()  
local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
--warn(YourRoot.CFrame)
--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
local LocationToTP2 = CFrame.new(-131, 284, -1202)
 YourRoot.CFrame = LocationToTP2 
end
}) 
        
        
tpSection:AddButton({
Name = "Off The Radar",
Callback = function()  
    local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
    --warn(YourRoot.CFrame)
    --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
    local LocationToTP2 = CFrame.new(93430.7422, 14481.3281, 565.520691, 1, 0, 0, 0, 1, 0, 0, 0, 1)
    YourRoot.CFrame = LocationToTP2
 end
})


tpSection:AddButton({
    Name = "Hospital",
    Callback = function()  
        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
		--warn(YourRoot.CFrame)
		--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
		local LocationToTP2 = CFrame.new(-1585, 253, -1223)
		YourRoot.CFrame = LocationToTP2
     end
    })  
    
    

    tpSection:AddButton({
        Name = "Dealership",
        Callback = function()  
            local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
		--warn(YourRoot.CFrame)
		--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
		local LocationToTP2 = CFrame.new(-355, 253, -1247)
		YourRoot.CFrame = LocationToTP2
         end
        })  
        
            tpSection:AddButton({
                Name = "Drip Store",
                Callback = function()  
                    local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                    --warn(YourRoot.CFrame)
                    --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
                    local LocationToTP2 = CFrame.new(67463, 10489, 559)
                    YourRoot.CFrame = LocationToTP2
                 end
                }) 



                tpSection:AddButton({
                    Name = "Exotic Dealer",
                    Callback = function()  
                        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
		--warn(YourRoot.CFrame)
		--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
		local LocationToTP2 = CFrame.new(-1518.91614, 267.96759, -983.473572, 0.999397933, -0.0346962325, 0, 0.0346962325, 0.999397933, 0, 0, 0, 1)
		YourRoot.CFrame = LocationToTP2
                     end
                    }) 




                    tpSection:AddButton({
                        Name = "Chicken Shop",
                        Callback = function()  
                            local yr = game.Players.LocalPlayer.Character.HumanoidRootPart
		local tp2 = CFrame.new(-956.771484, 251.26651, -805.67218, 1, 0, 0, 0, 1, 0, 0, 0, 1)

		yr.CFrame = tp2
                         end
                        }) 



                        tpSection:AddButton({
                            Name = "Bank Tools",
                            Callback = function()  
                                local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
		--warn(YourRoot.CFrame)
		--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
		local LocationToTP2 = CFrame.new(-350, 340, -555)
		YourRoot.CFrame = LocationToTP2
                             end
                            }) 





                            tpSection:AddButton({
                                Name = "Storage",
                                Callback = function()  
                                    local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                                    --warn(YourRoot.CFrame)
                                    --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
                                    local LocationToTP2 = CFrame.new(-31, 283, -546)
                                    YourRoot.CFrame = LocationToTP2
                                 end
                                }) 





                                tpSection:AddButton({
                                    Name = "Backpack Shop",
                                    Callback = function()  
                                        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
		--warn(YourRoot.CFrame)
		--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
		local LocationToTP2 = CFrame.new(-674, 254, -685)
		YourRoot.CFrame = LocationToTP2
                                     end
                                    }) 




                                    
                                tpSection:AddButton({
                                    Name = "Watch Shop",
                                    Callback = function()  
                                        local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                                        --warn(YourRoot.CFrame)
                                        --local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
                                        local LocationToTP2 = CFrame.new(-122, 284, -1171)
                                        YourRoot.CFrame = LocationToTP2
                                     end
                                    }) 


                                    tpSection:AddButton({
                                        Name = "Penthouse",
                                        Callback = function()  
                                            local YourRoot = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
		--warn(YourRoot.CFrame)
		--local LocationToTP = workspace["El_belicorp"].HumanoidRootPart.CFrame
		local LocationToTP2 = CFrame.new(-22, 417, -599)
		YourRoot.CFrame = LocationToTP2
                                         end
                                        }) 
------------------------------------------------------------------------------------------------------------------------------------------

local tresTab = PepsisWorld:CreateTab({
    Name = "Buys"
    })

    local BuysSection = tresTab:CreateSection({
        Name = "Shop"
    })

    BuysSection:AddButton({
        Name = "Shiesty",
        Callback = function()  
            game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("Shiesty")
         end
        }) 


        BuysSection:AddButton({
            Name = "Water",
            Callback = function()  
                game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("Water")
             end
            }) 


            BuysSection:AddButton({
                Name = "AppleJuice",
                Callback = function()  
                    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("AppleJuice")
                 end
                }) 



                BuysSection:AddButton({
                    Name = "GreenAppleJuice",
                    Callback = function()  
                        game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("GreenAppleJuice")
                     end
                    }) 


                    
                BuysSection:AddButton({
                    Name = "BluGloves",
                    Callback = function()  
                        game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("BluGloves")
                     end
                    }) 


                    BuysSection:AddButton({
                        Name = "WhiteGloves",
                        Callback = function()  
                            game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("WhiteGloves")
                         end
                        })
                        
                        BuysSection:AddButton({
                            Name = "BlackGloves",
                            Callback = function()  
                                game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("BlackGloves")
                             end
                            }) 


                            BuysSection:AddButton({
                                Name = "RawSteak",
                                Callback = function()  
                                    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("RawSteak")
                                 end
                                }) 


                                BuysSection:AddButton({
                                    Name = "RawChicken",
                                    Callback = function()  
                                        game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("RawChicken")
                                     end
                                    }) 
----------------------------------------------------------------------------------------------------------------------------------------


local BuyshSection = tresTab:CreateSection({
    Name = "Exotic Shop"
})

BuyshSection:AddButton({
    Name = "FakeCard",
    Callback = function()  
        game:GetService("ReplicatedStorage"):WaitForChild("ExoticShopRemote"):InvokeServer("FakeCard")
     end
    })
    
    BuyshSection:AddButton({
        Name = "GrapeDrank",
        Callback = function()  
            game:GetService("ReplicatedStorage"):WaitForChild("ExoticShopRemote"):InvokeServer("GrapeDrank")
         end
        }) 


            BuyshSection:AddButton({
                Name = "RiceBag",
                Callback = function()  
                    game:GetService("ReplicatedStorage"):WaitForChild("ExoticShopRemote"):InvokeServer("RiceBag")
                 end
                })
                
                
                BuyshSection:AddButton({
                    Name = "Seeds",
                    Callback = function()  
                        game:GetService("ReplicatedStorage"):WaitForChild("ExoticShopRemote"):InvokeServer("Seeds")
                     end
                    }) 
------------------------------------------------------------------------------------------------------------------------------------------------


local miscSection = GeneralTab:CreateSection({
    Name = "Misc"
})


miscSection:AddButton({
    Name = "Server Hop",
    Callback = function()  
        local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local currentJobId = game.JobId
local gameId = game.PlaceId

local function hop()
    while true do
        local success, result = pcall(function()
            return game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. gameId .. "/servers/Public?limit=100"))
        end)

        if success and result and result.data then
            for _, server in ipairs(result.data) do
                if server.id ~= currentJobId and server.playing < server.maxPlayers then
                    TeleportService:TeleportToPlaceInstance(gameId, server.id, player)
                    return
                end
            end
        else
            warn("Failed to fetch servers.")
        end

        wait(2) -- Retry after 2 seconds
    end
end

hop()

     end
    }) 
